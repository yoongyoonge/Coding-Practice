from itertools import permutations

def solution(n):
    a = set()
    for i in range(len(n)):
        #모든 자리수에 대해 비복원 추출인 순열을 수행하고 이를 a에 추가한 후 합집합을 구한다.
        a |= set(map(int, map("".join, permutations(list(n), i + 1)))) # OR연산자, 합집합을 뜻함

    a -= set(range(0, 2)) # 0부터 1까지의 값을 제거

    for i in range(2, int(max(a) ** 0.5) + 1): # 에라토스테네스의 체, 2부터 max(a)의 제곱근까지의 모든 수에 대해 반복
        a -= set(range(i * 2, max(a) + 1, i)) # 현재의 i 값에 대해, i의 배수들을 a 집합에서 제거
        
    return len(a)

# 이 솔루션의 핵심은 에라토스테네스의 체 이다.
'''
에라토스테네스의 체란?
- 소수를 판별하는 알고리즘
- 소수들을 대량으로 빠르고 정확하게 구하는 방법

에라토스테네스의 체의 원리 
- 가장 먼저 소수를 판별할 범위만큼 배열을 할당하여, 해당하는 값을 넣어주고, 이후에 하나씩 지워나가는 방법을 이용한다.

1. 배열을 생성하여 초기화한다.
2. 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지운다.
- 단, 지울 때 자기자신은 지우지 않고, 이미 지워진 수는 건너뛴다.
3. 2부터 시작하여 남아있는 수를 모두 출력한다.
4. 이 문제의 경우에는 모두 출력할 필요없이 그 수만 세면 된다.
'''

